1.构造函数继承：
function Animal(){
    this.species = '动物';
}
function Cat(name,color){
    Animal.call(this,arguments);
    this.name = name;
    this.color = color;
}
2.原型链继承
function Animal(){
    this.species = '动物';
}
function Cat(name,color){
    this.name = name;
    this.color = color;
}
Cat.prototype = new Animal();
Cat.prototype.constructor = Cat;//重点操作

3.直接继承prototype
改写Animal对象: function Animal(){},
               Animal.prototype.species = '动物';
Cat.prototype = Animal.prototype;
Cat.prototype.constructor = Cat;
优点：效率高点，节省内存，相比以上两种没有Animal实例的过程。
缺点：对于任何Cat.prototype的改动都会反映到Animal.prototype。Animal.prototype.constructor = Cat.
4.利用空对象做介质继承（基于3的改进）
function Animal(){
    this.species = '动物';
}
function Cat(name,color){
    this.name = name;
    this.color = color;
}
function F(){}
F.prototype = Animal.prototype;
Cat.prototype = new F();
Cat.prototype.constructor = Cat;
new Cat()-->Cat.prototype-->F.prototype-->Animal.prototype-->Object.prototype-->null
优点：Animal.prototype.constructor = Animal。
还可以封装：
function extend(child,parent){
    function F(){},
    F.prototype = parent.prototype;
    child.prototype = new F();
    child.prototype.constructor = child;
    child.uber = parent.prototype;
}
extend(Cat,Animal);
5.直接拷贝继承
function Animal(){}
Animal.prototype.species = '动物';
function Cat(name,color){
    this.name = name;
    this.color = color;
}
function extend2(child,parent){
    let p = parent.prototype;
    let c = child.prototype;
    for (let i in p){
        c[i] = p[i];
    }
    c.uber = p;
}
extend2(Cat,Animal);

